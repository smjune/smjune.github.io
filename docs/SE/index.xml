<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Job.logging on MJ. Breadcrumbs</title><link>https://smjune.github.io/docs/SE/</link><description>Recent content in Job.logging on MJ. Breadcrumbs</description><generator>Hugo</generator><language>en</language><atom:link href="https://smjune.github.io/docs/SE/index.xml" rel="self" type="application/rss+xml"/><item><title>Vibe Coding</title><link>https://smjune.github.io/docs/SE/vibecoding/</link><pubDate>Tue, 22 Apr 2025 17:58:45 +0900</pubDate><guid>https://smjune.github.io/docs/SE/vibecoding/</guid><description>&lt;h2 id="what-is-vibe-coding">
 What is Vibe Coding
 &lt;a class="anchor" href="#what-is-vibe-coding">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="vibecoding.png" alt="Vibe Coding" />&lt;/p>
&lt;h3 id="assembly-cc-python">
 Assembly, C/C++, Python
 &lt;a class="anchor" href="#assembly-cc-python">#&lt;/a>
&lt;/h3>
&lt;p>물리적인 자원을 더 쉽고, 싸게 사용함에 따라 프로그램밍 언어도 같이 변화 할 수 밖에 없다.
물리적 리소스를 사용하는 컴파일시 더 많은 자원을 사용하고,
코드를 작성하는것은 점점 자연어 (Pseudo code) 코드의 지시형태로 되어 간다.&lt;/p>
&lt;p>0과 1의 기계어로 번역하는 것이 컴파일이라 하면, 자연어를 프로그래밍 syntax 로 변역해 주는 것은 뭐라 불러야 하나?&lt;/p>
&lt;ul>
&lt;li>Assembley:
컴파일시 물리적 자원 사용은 적지만, 프로그래밍은 난해하다.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">section .data
 filename db &amp;#34;test.txt&amp;#34;, 0 ; 파일 이름
 content db &amp;#34;test&amp;#34;, 0 ; 쓸 내용
 content_len equ $ - content -1 ; 내용 길이 (NULL 문자 제외)

section .text
 global _start

_start:
 ; 파일을 생성하거나 열기 (sys_open)
 mov rax, 2 ; sys_open 시스템 콜 번호
 mov rdi, filename ; 파일 이름 포인터
 mov rsi, 0101o ; 플래그 (O_WRONLY | O_CREAT | O_TRUNC) - 쓰기 전용, 없으면 생성, 있으면 내용 삭제
 mov rdx, 0644o ; 모드 (rw-r--r--)
 syscall ; 시스템 콜 호출
 mov r12, rax ; 파일 디스크립터를 r12에 저장 (오류 처리 안 함)

 ; 파일에 쓰기 (sys_write)
 mov rax, 1 ; sys_write 시스템 콜 번호
 mov rdi, r12 ; 파일 디스크립터
 mov rsi, content ; 쓸 내용 포인터
 mov rdx, content_len ; 쓸 내용 길이
 syscall ; 시스템 콜 호출

 ; 파일 닫기 (sys_close)
 mov rax, 3 ; sys_close 시스템 콜 번호
 mov rdi, r12 ; 파일 디스크립터
 syscall ; 시스템 콜 호출

 ; 프로그램 종료 (sys_exit)
 mov rax, 60 ; sys_exit 시스템 콜 번호
 xor rdi, rdi ; 종료 코드 0
 syscall ; 시스템 콜 호출
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>C/C++:
아직까지 syntax 의 벽은 여전히 남아 있다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C" data-lang="C">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FILE &lt;span style="color:#f92672">*&lt;/span>fp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fopen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;test.txt&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;w&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (fp &lt;span style="color:#f92672">==&lt;/span> NULL) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">perror&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;파일 열기 오류&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> EXIT_FAILURE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">fputs&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>, fp) &lt;span style="color:#f92672">==&lt;/span> EOF) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">perror&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;파일 쓰기 오류&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fclose&lt;/span>(fp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> EXIT_FAILURE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fclose&lt;/span>(fp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> EXIT_SUCCESS;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>python
쉽다고 해도, 일상언어는 아니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;test.txt&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;w&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">IOError&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;파일 쓰기 오류: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>e&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Pseudocode:
각 프로그래밍 언어의 syntax 보다 논리적인 구조가 더 중요하게 되었다.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>파일 &amp;#34;test.txt&amp;#34;를 쓰기 모드로 연다.
만약 파일 열기에 실패하면, 오류를 출력하고 종료한다.
파일에 &amp;#34;test&amp;#34; 문자열을 쓴다.
파일을 닫는다.
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;strong>vibe coding&lt;/strong>:
전체적인 context, prompt 등 LLM 적인 요소가 더 중요하게 되었다.&lt;br>
&lt;code>test.txt 파일을 열어서 'text'쓰는 코드 작성해줘&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="essence-and-accident">
 Essence and Accident
 &lt;a class="anchor" href="#essence-and-accident">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Pair programming with AI generating code ?&lt;/li>
&lt;li>Assembly 으로 코딩하던 사람이 C/C++ 으로 코딩하는 것을 보고 어떤 생각이 들었을까?
&lt;ul>
&lt;li>C/C++ 을 사용하지만, Assembly 도 배움.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>제품을 위한 코드 보다는 제품 코드를 테스트 하는 코드를 생산
&lt;ul>
&lt;li>제품을 위한 코드는 의외로 매우 보수적임 (신기술을 적용하기 힘듬)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>어떻게 내가 의도하는 코드를 LLM 이 생산하도록 만들것 인가?
&lt;ul>
&lt;li>agent, prompt, context aware, &amp;hellip;&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="tools">
 Tools
 &lt;a class="anchor" href="#tools">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Knowledge Management tool : Notion, Obsidian&lt;/li>
&lt;li>Access to an LLM : GPT, Claude, Gemini&lt;/li>
&lt;li>AI Code Editor : Cursor, Windsurf&lt;/li>
&lt;li>IDE AI Extension : Continue, Cline, AutoPilot, Gemini Code Assist&lt;/li>
&lt;li>VCS : Git&lt;/li>
&lt;/ul>
&lt;h2 id="pre-vibe-coding-routine">
 Pre-Vibe Coding Routine
 &lt;a class="anchor" href="#pre-vibe-coding-routine">#&lt;/a>
&lt;/h2>
&lt;h3 id="ideation">
 Ideation
 &lt;a class="anchor" href="#ideation">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>당연히 구현하기 전에 계획은 중요하다.&lt;/li>
&lt;li>Idea을 작성 지속적으로 구체화하고,&lt;/li>
&lt;li>관련자료를 모으고 분류하고,&lt;/li>
&lt;li>정보들을 연결한다.&lt;/li>
&lt;li>이 모든걸 위해 Knowledge Management tool 이 필요함.&lt;/li>
&lt;/ul>
&lt;h3 id="refs-index">
 Refs. Index
 &lt;a class="anchor" href="#refs-index">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Codebase indexing&lt;/li>
&lt;li>Online Refs. (e.g., Cursor|Docs)
&lt;ul>
&lt;li>Language Syntax Guide (e.g., Python)&lt;/li>
&lt;li>Domain Knowledge (e.g., Scipy, Sklearn)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Live Refs (e.g., MCP:Brave Search, context7)&lt;/li>
&lt;/ul>
&lt;h3 id="persona-template">
 Persona (Template)
 &lt;a class="anchor" href="#persona-template">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>User (e.g., Cursor|User rules)&lt;/li>
&lt;li>Project (e.g., Cursor|Project rules)
&lt;ul>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Product (e.g., Product Requiremet Document)
&lt;ul>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="harmonize-with-sdlc">
 Harmonize with SDLC
 &lt;a class="anchor" href="#harmonize-with-sdlc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Design - Code - Test - Build - Deploy&lt;/li>
&lt;li>Iterative incremental , evolutionary&lt;/li>
&lt;/ul>
&lt;h3 id="design">
 Design
 &lt;a class="anchor" href="#design">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Project &amp;amp; Task management : taskmaster-ai&lt;/li>
&lt;li>PRD : Notion, Obsidian&lt;/li>
&lt;li>UI/UX : Figma&lt;/li>
&lt;li>Diagram : UML, Mermaid&lt;/li>
&lt;/ul>
&lt;h3 id="code">
 Code
 &lt;a class="anchor" href="#code">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Choosing LLM Model
&lt;ul>
&lt;li>AI Code Editor, IDE AI Extentions, Chatbot&lt;/li>
&lt;li>Cloud vs Local (Open Source)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Context-Aware
&lt;ul>
&lt;li>memory&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Prompt Engineering
&lt;ul>
&lt;li>잘통하는 prompt는 DB화 할것&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Agentic Approch
&lt;ul>
&lt;li>Access to resource (e.g., &lt;a href="https://modelcontextprotocol.io/introduction">MCP&lt;/a>)&lt;/li>
&lt;li>Make a Agent (e.g., &lt;a href="https://google.github.io/adk-docs/">ADK&lt;/a>)&lt;/li>
&lt;li>Connect Agent to Agent (e.g., &lt;a href="https://github.com/google/A2A">A2A&lt;/a>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Project Ochestration
&lt;ul>
&lt;li>Managing Non-deterministic&lt;/li>
&lt;li>Restore checkpoint&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Human-In-The-Loop
&lt;ul>
&lt;li>AI 생산한 code 의 품질 확보 방안&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="build">
 Build
 &lt;a class="anchor" href="#build">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Android Studio&lt;/li>
&lt;li>XCode&lt;/li>
&lt;/ul>
&lt;h3 id="deploy">
 Deploy
 &lt;a class="anchor" href="#deploy">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>App&lt;/li>
&lt;li>WEB&lt;/li>
&lt;/ul>
&lt;h2 id="추가-읽을거리">
 추가 읽을거리
 &lt;a class="anchor" href="#%ec%b6%94%ea%b0%80-%ec%9d%bd%ec%9d%84%ea%b1%b0%eb%a6%ac">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://tech.kakao.com/posts/696">kakao AI blog&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>