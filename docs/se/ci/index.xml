<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Countinuous Integration on MyoungJune Sung says Hello Wrold</title><link>https://smjune.github.io/docs/se/ci/</link><description>Recent content in Countinuous Integration on MyoungJune Sung says Hello Wrold</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://smjune.github.io/docs/se/ci/index.xml" rel="self" type="application/rss+xml"/><item><title>Local build</title><link>https://smjune.github.io/docs/se/ci/localbuild/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://smjune.github.io/docs/se/ci/localbuild/</guid><description>지금 하는 이야기는 주로 2000년 초반 처음 SW 개발 일을 시작하면서 겪은 일이다.
생각해보면, 장비도 비싸고, 사용하는 툴도 MS visual SourceSafe (1994)이거나, 당시 최신 툴인 Subversion (2000)정도여서 그때는 거기까지가 최선이였고, 어쩔수 없이 발생하는 업무 공백들은 많은 사람들이 젊음으로 매우고 있었다. 말 그대로 &amp;lsquo;라떼는&amp;hellip;&amp;rsquo; 이야기 이다.
개발자가 로컬빌드를 하거나, 주로 여러 개발자의 소스가 VCS에 다 모아 졌을때, 빌드 담당자가 해당 소스를 빌드 서버로 다운받아 일괄 빌드을 한 후 결과를 게시하게 된다. (빌드서버는 개발자 PC 보다 HW spec이 좋았다.</description></item><item><title>Post CI</title><link>https://smjune.github.io/docs/se/ci/postci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://smjune.github.io/docs/se/ci/postci/</guid><description>2005년 부터 약 10년간 SW개발에 참여하지 않았기에 branch 와 git 을 2016년 다시 SW개발 조직에 되돌아 와서야 접하게 되었다. 개인적으로 그 10년을 그대로 SW개발 업무를 계속했었더라면 현재 나의 위치가 지금과 많이 달라졌을찌 종종 생각하게 된다. 빠르게 발전하고 매년 새로운 기술이 나온는 SW 분야에서 10년의 외도는 그야 말로 나를 신입사원으로 만들게 충분한 시간이였다. 그 나마 대학 전공과 취업 후 6년을 시간들을 되 집어보면서 &amp;lsquo;그때 그랬는데&amp;rsquo; 라는 생각이 어느정도 도움이 되는 부분도 있었고, &amp;lsquo;어 아직도 이렇게 하고 있네?</description></item><item><title>Branches</title><link>https://smjune.github.io/docs/se/ci/branch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://smjune.github.io/docs/se/ci/branch/</guid><description>앞에서 말한 것 처럼 2016년이 되서야 다시 SW개발 업무를 다시 시작하게 되었으므로 나에게 branch 의 개념을 이해하는 것은, 군 제대 후 복학생으로 공업 수학의 미분을 푸는데 갑자기 인수분해가 되지 않았을때 느겼던 괴리감을 다시 한번 느끼게 해 주었다.
submit 전에 어떻게 사전 검증을 할 것인가에 대하 대답으로
브랜치 개념이 도입이 됨
기존 post CI 가 적용된 브랜치를 운영 (dev) 하여
확인이 완료된 change을 운영 브랜치 (main) 으로 merge
- 각자 정해진 소스 트리 (branch) 에 소스를 업로드 한다.</description></item><item><title>Presubmit</title><link>https://smjune.github.io/docs/se/ci/presubmit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://smjune.github.io/docs/se/ci/presubmit/</guid><description>branch 와 더불어 presubmit 은 병결로 빼먹은 진도를 따로 따라 잡아야 하는 상황과 비슷했다.
브랜치가 많아 짐에 따라 브랜치 운영 전략 (Flow) 이 복잡해짐
이에 바로 main 브랜치에 submit 하는 것을 기본으로
submit 전 Work In Progress 단계를 제공함
- code base 의 WIP 기능을 이용하여 소스를 업로드 한다. (refs/for/head, Sheves) - WIP 와 연결된 workflow 에 따라 빌드 및 테스트가 수행된다. - 결과를 게시한다. - 수정한 코드로 WIP 을 업데이트 한다.</description></item><item><title>Delivery &amp; Deployment</title><link>https://smjune.github.io/docs/se/ci/cd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://smjune.github.io/docs/se/ci/cd/</guid><description>SW 제품도 점차 서비스화 되면서 발전(?)하게 된 분야이다.
기준에 package SW (shrinkwrap license) 에서 WEB 을 기반으로 한 서비스로 SW 제품의 성격이 변경되었다.
기존에 박스를 사서 자시의 PC 에 설치하는 사용하는 것이 이제는 NW에 접속하여 온라인으로 사용하는 것이다.
RTM (release to manufacturing) 이라고 해서 CD 로 구울 최후 SW 버전의 개념은, 기껏 HW 와 밀접하게 연관되어 있는 SW 로 한정되어 이제는 몇 남지 않아 보인다.
shrinkwrap contract (license) : the seller considers to have been accepted by the buyer once the package is opened or the product used.</description></item><item><title>VCS</title><link>https://smjune.github.io/docs/se/ci/vcs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://smjune.github.io/docs/se/ci/vcs/</guid><description>distributed vs Centrialized VCS
fork : clone a repo from remote on REPO</description></item><item><title>Repo</title><link>https://smjune.github.io/docs/se/ci/repo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://smjune.github.io/docs/se/ci/repo/</guid><description>Multi vs Mono REPO</description></item></channel></rss>