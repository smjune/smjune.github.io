<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on MyoungJune Sung says Hello Wrold</title><link>https://smjune.github.io/</link><description>Recent content in Introduction on MyoungJune Sung says Hello Wrold</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 17 Feb 2023 22:02:05 +0900</lastBuildDate><atom:link href="https://smjune.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Countinuous Integration</title><link>https://smjune.github.io/docs/se/ci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://smjune.github.io/docs/se/ci/</guid><description> local build Post CI Branch (Pre integration) Presubmit CD CI/CD ( DevOps )</description></item><item><title>Daily1</title><link>https://smjune.github.io/docs/eng/daily/daily1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://smjune.github.io/docs/eng/daily/daily1/</guid><description>dialy 1</description></item><item><title>Docker</title><link>https://smjune.github.io/docs/se/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://smjune.github.io/docs/se/docker/</guid><description>docker 의 등장
Github runner 으로 생각해 보는 docker
Self-hosted (bare metal vs virtual)
Github-Hosted</description></item><item><title>Hugo Tips</title><link>https://smjune.github.io/docs/se/hugo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://smjune.github.io/docs/se/hugo/</guid><description>Bundles # 전체 글 구조를 잡을때, 가장 중요하게 생각해 하는 부분이 hugo 의 bundle 개념이다.
Leaf 와 Branch 로 나눠 지는대, 말 그대로 leaf bundle 은 말단 말뭉치 (?) 이므로,
하위로 다른 구성요소를 갖을수 없다.
반면 Branch bundle의 경우 하위로 다른 branch bundle 과 leaf bundle을 갖을 수 있다.
자세한 차이점은 아래 표를 참고 하자
index.md vs _index.md 으로 구분하여 보면 된다.
https://gohugo.io/content-management/page-bundles/
Leaf Bundle Branch Bundle Usage Collection of content and attachments for single pages Collection of attachments for section pages (home page, section, taxonomy terms, taxonomy list) Index filename index.</description></item><item><title>iMAC 2009 Late upgrade</title><link>https://smjune.github.io/posts/mac/</link><pubDate>Fri, 17 Feb 2023 22:02:05 +0900</pubDate><guid>https://smjune.github.io/posts/mac/</guid><description>Mac OS # ㅁ Snow leopard (10.6.8) 에서 High Sierra (10.13.6) 까지 업그레이드
ㅁ iMac Late 2009 는 최대 High Sierra 까지 가능
(High Sierra 이후 MacOs 는 iMac 2012 부터 가능)
ㅁ backup on 10.6
- iClould 는 10.7 이상에서 지원 x
- 외장SSD는 10.10 이상에서 지원 x
- 외장HDD 혹은 USB memory, DVD 굽기..
✓ - iMac Late 2009 는 SD memory card slot 지원 *
ㅁ Steps (Snow leopard 10.</description></item><item><title>Git command 정리</title><link>https://smjune.github.io/docs/se/git/</link><pubDate>Sat, 11 Feb 2023 10:04:43 +0900</pubDate><guid>https://smjune.github.io/docs/se/git/</guid><description>GIT 연습 Site # http://learngitbranching.js.org/
https://backlogtool.com/git-guide/kr/
$ level - 연습문제 초기 화면 (문제선택) $ sandbox - 빈 연습 $ show solution - 해당보기 $ reset - 해당 level 처음부터 다시 $ undo - 1개 명령 취소 $ git fakeTeamwork 1 - origin 에 1개 커밋 넣기 Set up # $ git clone -b [브랜치 | tag] [REPO URL] $ git remote add orgin [REPO URL] // origin 으로 REPO URL 등록 $ git remote rm orgin // origin 삭제 $ git submodule add [REPO RUL] [Folder Path] $ git submodule update branch # $ git branch -f bugfix HEAD~1 : bugfix 브랜치를 HEAD [혹은 브랜치 명] 1개 전 commit으로 이동 $ git branch -u origin/maser [Branch A] : 이미 있는 local Branch A (생략하면 현재 checkout branch) 가 origin/master 을 track함 --&amp;gt; git checkout --track 과 비교 $ git branch -d Branch A : local 에서만 Branch A 삭제 $ git branch -d -r origin/branch A : remote 트랙킹 브랜치를 로컬에서 삭제 (에, origin/featrue ) checkout # $ git checkout branch A : Remote에 있는 branch A 에 대해 local 에 branch A 와 origin/branch A만들고, checkout.</description></item><item><title>Python with Pyenv</title><link>https://smjune.github.io/docs/se/pyenv/</link><pubDate>Thu, 09 Feb 2023 18:07:51 +0900</pubDate><guid>https://smjune.github.io/docs/se/pyenv/</guid><description>Pyenv 사용하기 # $ pyenv versions * system (set by /home/june.sung/.pyenv/version) 2.7.17 $ pyenv install --list $ pyenv install 3.6.9 * system (set by /home/june.sung/.pyenv/version) 2.7.17 3.6.9 $ pyenv shell 3.6.9 $ pyenv which python 3.6.9 (set by PYENV_VERSION environment variable) # $ pyevn [ global &amp;gt; local &amp;gt; shell ] X.X.X # cat ~/.pyenv/version | cat .pyton-version | echo $PYENV_VERSION # loacal 은 해당 폴더 아래 (set by ~폴더/.</description></item><item><title>Push to Gitlab</title><link>https://smjune.github.io/docs/se/gitlab/</link><pubDate>Mon, 06 Feb 2023 20:28:27 +0900</pubDate><guid>https://smjune.github.io/docs/se/gitlab/</guid><description>GitLab 으로 Deploy 하기 # github 에 deploy 했던 hugo project 을 git remote 만 추가하서 gitlab repo 에 push 하고,
gitlab CI/CD 을 이용하여 build, deploy 하기
결론 gitlab에서 repo 만들고, 단순히 remote 만 추가해서 바로 push 하면 될 줄 알았는데, gitlab 에서 main 생성시 initial commit 이 자동으로 생성되어 바로 push 할 수 없었다. (빈 브랜치 생성불가)
로컬 main 기준으로 다른 브랜치 labmain 만든 후 push 한 후, main 을 지우고, labmain 를 기준으로 main 을 다시 생성 하여야 한다.</description></item><item><title>Hello GitHub</title><link>https://smjune.github.io/docs/se/hello/</link><pubDate>Sun, 05 Feb 2023 10:22:18 +0900</pubDate><guid>https://smjune.github.io/docs/se/hello/</guid><description>github 에서 블로그 만들기 # Editor : Scrivener, VSCode SSG : HUGO (theme : hugo-book) REPO : github (github.com/smjune/smjune.github.io),
gitlab (backup : gitlab.com/smjune/smjune.gitlab.io) WEB hosting : smjune.github.io (GitHub Pages) Project Settings | Pages | Build and Deploy | branches : gh-pages 설정 로컬에서는 &amp;lsquo;hugo server&amp;rsquo; 을 이용하여 확인 후 push 함 Build &amp;amp; Deploy : github actions / gitlab CI/CD hugo 로컬 빌드를 해서 public 을 submodule 으로 다른 repo 에 push 하는 방식 대신 github action 을 이용하여 1개 repo에서 main 을 빌드 후 gh-pages 브랜치로 deploy 하는 방식 사용 해당 github pages 을 만든 이력정리 (아래 관련 지식 보유 가정)</description></item></channel></rss>